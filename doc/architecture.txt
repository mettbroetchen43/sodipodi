Sodipodi internal architecture

1. Overview

Sodipodi display and editing engine is built using MVC paradigm.
Unlike most other similar programs, we have further split model
into two distinct layers. This has proven to be extremely powerful
technique, giving us clear and fast implementation, functional
granularity and easy expandibility.

1.1. Agnostic XML backbone

The basis of sodipodi document is its plain XML representation in
memory. This is tree-shaped structure, each node being represented by
lightweight typeless object (SPRepr). These objects implement minimal
interface of both control (methods) and mutation events (callbacks).
We use term 'agnostic' for describing that part of model, to
underline the typeless nature of SPRepr. More or less this is just
XML file representation in memory.

1.2. Typed SVG document

The most actively used part of sodipodi document model is SVG object
tree. This is constructed on the top of XML tree, and reacts to all
mutation events in agnostic tree, thus keeping its internal
state always synchronized with backbone. The opposite is not true -
XML backbone is not aware of SVG object tree, and thus does not
react to its modifications. If writeback to backbone is needed, it
has to be requested explicitly by controller.
SVG tree is constructed of SPObject subclasses - in general there
is one subclass for each SVG element type, plus abstract base classes.

1.3. NRArena view

NRarena is abstract display engine, that allows construction of display
caches from NRArenaItem subclasses. These are lightweight, having only
some basic object types, and used for most display needs of sodipodi.
Both editing window, and bitmap export code create special NRArena
instance, and ask SVG document to show itself to given NRArena.
There is ::show virtual method, implemented by all visible object classes,
that adds NRArenaItem node to display tree. Completed display cache
is used for fast screen updates and stripe based bitmap exports.
During NRArena lifetime SVG objects keep all display cache elements
constantly updated, thus ensuring display is always up to date.

1.4. Controllers

Like the model suggests, controllers can be implemented acting on
different layers. Which one is best, depends on the type of action
that given controller performs. Usually very generic and single-shot
operating controllers act on SPRepr layer, those providing visual
feedback or being tied to certain object type, on SPObject layer.



2. Detailed view

2.1. SPRepr

The most basic SVG (XML) document backbone is implemented as in-memory
tree of SPRepr objects, each object corresponding to single node in
XML file.
Currently there are only two types of SPReprs - normal element node
and text node. More types may be added in future, but the structure
probably remain always much simpler and faster than DOM.

SPRepr may have:
- attributes (keyword/value) pairs
- content (text)
- child nodes

Attribute values are textual, and no checks are done in that layer to
ensure document validity. Also CSS style strings are unparsed in that
layer.
SPRepr tree is built during document loading or creation. As it is
textual and always synchronized with display, unfiltered saving
involves just dumping it into file.

The basic API acting on SPRepr level is really spartan.

SPRepr *sp_repr_new (const unsigned char *name)
SPRepr *sp_repr_new_text (const unsigned char *content)
SPRepr *sp_repr_ref (SPRepr *repr)
SPRepr *sp_repr_unref (SPRepr *repr)
SPRepr *sp_repr_duplicate (SPRepr *repr)

int sp_repr_set_content (SPRepr *repr, const unsigned char *content)
int sp_repr_set_attr (SPRepr *repr, const unsigned char *key, const unsigned char *value)
int sp_repr_add_child (SPRepr *repr, SPRepr *child, SPRepr *ref)
int sp_repr_remove_child (SPRepr *repr, SPRepr *child)
int sp_repr_change_order (SPRepr *repr, SPRepr *child, SPRepr *ref)

In addition there are some accessor methods and lot of convenience ones.

Each SPRepr can have one or many event vectors associated with it.
Event vector is block of callback pointers for different kind of
mutation events.

void sp_repr_add_listener (SPRepr *repr, const SPReprEventVector *vector, void *data)
void sp_repr_remove_listener_by_data (SPRepr *repr, void *data)

struct _SPReprEventVector {
        void (* destroy) (SPRepr *repr, gpointer data);
        gboolean (* add_child) (SPRepr *repr, SPRepr *child, SPRepr *ref, gpointer data);
        void (* child_added) (SPRepr *repr, SPRepr *child, SPRepr *ref, gpointer data);
        gboolean (* remove_child) (SPRepr *repr, SPRepr *child, SPRepr *ref, gpointer data);
        void (* child_removed) (SPRepr *repr, SPRepr *child, SPRepr *ref, gpointer data);
        gboolean (* change_attr) (SPRepr *repr, const guchar *key, const guchar *oldval, const guchar *newval, gpointer data);
        void (* attr_changed) (SPRepr *repr, const guchar *key, const guchar *oldval, const guchar *newval, gpointer data);
        gboolean (* change_content) (SPRepr *repr, const guchar *oldcontent, const guchar *newcontent, gpointer data);
        void (* content_changed) (SPRepr *repr, const guchar *oldcontent, const guchar *newcontent, gpointer data);
        gboolean (* change_order) (SPRepr *repr, SPRepr *child, SPRepr *oldref, SPRepr *newref, gpointer data);
        void (* order_changed) (SPRepr *repr, SPRepr *child, SPRepr *oldref, SPRepr *newref, gpointer data);
}

All events, except destroy which is unconditional have pre and post event
callbacks. Pre-event callback return value is used to signal, whether
given modification is allowed. If it is FALSE, operation will be cancelled,
and invoking method also returns FALSE.
Using callbacks in block is much more convenient, than adding them
one-by-one, as usually listening code wants to install several handlers
at once, and the same set of handlers for many different nodes. NULL
pointers are allowed in event vector.

Although the most important functionality of SPRepr tree is to serve as
document backbone, it has other functions besides that. SPReprs are also
used to store preferences, copy buffer and undo stack.



2.2. SPObject

SPObject is abstract base class of all document nodes at SVG document
level. Each SPObject subclass implements certain SVG element node type,
or abstract base class for different node types.
SPObject layer is bound to SPRepr layer, closely following SPRepr
mutations via callbacks. During creation SPObject parses and interprets
all textual attributes and CSS style strings of the SPRepr, and later
updates internal state whenever it receives signal about change. The
opposite is not true - there are methods manipulating SPObjects directly
and such changes do not propagate int SPRepr layer. This is important
for implementation of undo stack, animations and other features.

SPObjects are bound to higher-level container SPDocument, which provides
document level functionality, such as undo stack, dictionary and so on.

SPObjects are implemented using Gtk object system (GObjects in gtk 2
version), which provides extremely powerful and flexible OO framework
in pure C.

SPObject class hierarchy

SPObject ABSTRACT
  SPObjectGroup ABSTRACT
    SPNamedView <sodipodi:namedview>
    SPClipPath <clipPath>
  SPGuide <sodipodi:guide>
  SPPaintServer ABSTRACT
    SPGradient ABSTRACT
      SPLinearGradient <linearGradient>
      SPRadialGradient <radialGradient>
    SPPattern <pattern>
  SPDefs <defs>
  SPItem ABSTRACT
    SPGroup <g>
      SPRoot <svg>
      SPAnchor <a>
  SPImage <image>
  SPPath ABSTARCT
    SPShape <path>
      SPLine <line>
      SPPolyLine <polyline>
      SPPolygon <polygon>
        SPStar <sodipodi:star>
      SPRect <rect>
      SPSpiral <sodipodi:spiral>
      SPGenericEllipse ABSTRACT
        SPCircle <circle>
        SPEllipse <ellipse>
	SPArc <sodipodi:arc>
  SPChars ABSTRACT
    SPString TEXT NODE
  SPDefs <defs>
  SPText <text>
  SPTSpan <tspan>

SPObject internals

struct _SPObject {
	GtkObject object;
	unsigned int hrefcount;
	SPDocument *document;
	SPObject *parent;
	SPObject *next;
	SPRepr *repr;
	unsigned char *id;
	SPStyle *style;
	const unsigned char *title;
	const unsigned char *description;
};

The basic refcounting is handled by parent class (GtkObject). Hrefcount
is used for weak references, for example, to determine whether any
graphical element references certain gradient node.
Parent and next fields are used to establish tree structure.
Id is copy of SPRepr 'id' attribute for normal nodes, and used as
unique index of all objects in given document.

Virtual methods

/******** Disclaimer *******/
This will change a lot in future

void ::build (SPObject *object, SPDocument *document, SPRepr *repr)

This has to be invoked immediately after creation of SPObject. The
frontend method ensures the new object is properly attached to document
and repr, implementation then will parse all attributes, generate children
objects and so on.
Invoking ::build on SPRoot object results in creation of the whole
document tree (this is, what SPDocument does after creation of XML tree).

void ::release (SPObject *object)

This is the opposite of ::build. It has to be invoked as soon, as object
is removed from tree, even if it is still alive according to reference
count. Frontend unregisters object from document and releases SPRepr
bindings, implementations should free state data and release all child
objects.
Invoking ::release on SPRoot destroys the whole document tree.

void ::child_added (SPObject *object, SPRepr *child, SPRepr *ref)
void ::remove_child (SPObject *object, SPRepr *child)
void ::order_changed (SPObject *object, SPRepr *repr, SPRepr *oldref, SPRepr *newref)

These are invoked, whenever given mutation event happens in XML tree.
::remove_child is invoke BEFORE removing in XML tree happens, so
grouping objects can safely release child data. Other two will be
invoked AFTER actual XML tree mutation.
Only grouping objects have to implement these.

void ::read_attr (SPObject *object, const unsigned char *key)

Signals object, that XML attribute is changed. The frontend checks for
'id' attribute, implementations have to read actual attribute value and
update internal state.

void ::read_content (SPObject *object)

Signals object that XML node content has changed. Only meaningful for
SPString implementing XML TEXT node.

void ::modified (SPObject *object, unsigned int flags)

Virtual method AND signal, implementing asynchronous state change
notification. Whenever object internal state changes, it requests that
::modified will be scheduled from idle loop. Flags are given as hint,
what exactly changes. Read relevant section about more information.

SPRepr ::write (SPObject *object, SPRepr *repr, unsigned int flags)

Request SPObject internal state to be written back to SPRepr. If
SP_OBJECT_WRITE_BUILD flag is set, SPRepr is created if necessary.
This is used at various places, most notably to generate plain SVG
document, and to complete certain GUI operations.



2.3. SPItem

SPItem is abstract base class for all graphic (visible) SVG nodes. It
is subclass of SPObject, with great lot of specific functionality.

SPItem internals

struct _SPItem {
        SPObject object;
        unsigned int sensitive : 1;
        unsigned int stop_paint: 1;
        double affine[6];
        SPItemView *display;
        SPClipPath *clip;
};

Affine is 3x2 matrix describing transformation from item to parent local
coordinate systems. Each display in liked list has link to single
NRArenaItem, that implements actual renderable image of item.

Virtual methods

/******** Disclaimer *******/
This will change a lot in future
Only most important are listed

void ::bbox (SPItem *item, ArtDRect *bbox, const double *transform)

Calculates item logical bounding box. Logical bbox does not take account
stroke width, and certain other visual properties. Transformation
is 3x2 matrix describing coordinate transform from item local coordinate
system to the coordinate system of bounding box.

void ::print (SPItem *item, SPPrintContext *ctx)

Prints item visual representation, using internal printing frontend.
In future this may be more generic exporting method.

char ::description (SPItem *item)

Gives short description of item, suitable for use in statusbar etc.

NRArenaItem ::show (SPItem *item, NRArena *arena)

Creates NRArena display cache representation of item. Frontend places
generated item into hierarchy, implementations have to build correct
NRArenaItem and keep it up to date.

void (* hide) (SPitem *item, NRArena *arena)

The opposite of ::show.

void ::write_transform (SPItem *item, SPRepr *repr, double *transform)

Tries to remove extra transformation by modifying other aspects of
item representation. For example by changing rectangle width and height
scaling component of transformation can be dropped.
This is used to make SVG file more human-readable.

void ::menu (SPItem *item, SPDesktop *desktop, GtkMenu *menu)

Appends item specific lines into menu. This is used to generate context
menu, and will probably move into separate module in future.



2.4 SPDocument

SPDocument serves as container of both model trees (agnostic XML and
typed object tree), and implements all document-level functionality
used by the program.

SPDocument implements undo and redo stacks, and id based object dictionary.
Thanks to unique id attributes, the latter can be used to map from XML
tree back to object tree. Documents are themselves registered by main
program metaobject Sodipodi, which does elementary bookeeping.

SPDocument performs the basic operations, needed for asynchronous
update notifiaction (SPObject ::modified virtual method), and implements
'modified' signal itself too.

Many document level operations, like load, save, print, export and so on,
use SPDocument as basic datatype.

2.4.1. Undo and Redo implementation

Using split document model gives sodipodi very simple and clean undo
implementation. Whenever mutation occurs in XML tree, SPObject invokes
one of the five corresponding handlers of its container document. This
writes down generic description of given action, and appends it to recent
action list, kept by document. There will be as many action records,
as there are mutation events, which are kept and processed together in
undo stack. Two methods exist to indicat that given action is completed:

void sp_document_done (SPDocument *document)
void sp_document_maybe_done (SPDocument *document, const unsigned char *key)

Both move recent action list into undo stack and clear list afterwards.
While the first method does unconditional push, the second one first
checks the key of most recent stack entry. If the keys are identical,
current action list is appended to existing stack entry, instead of
pushing it on its own.
This behaviour can be used to collect multi-step actions, like winding Gtk
spinbutton, from UI into single undoable step.

For controls implemented by sodipodi itself, implementing undo as single
step is usually done in more efficent way. Most controls have the
abstract model of grab, drag, release and change user action. During grab
phase, all modifications are done to SPObject directly - i.e. they do
not change XML tree, and thus do not generate undo actions as well.
Only at release phase (normally associated with releasing mousebutton),
changes are written back to XML tree, thus generating only single set
of undo actions.


2.5. SPView and SPviewWidget

SPView is abstract base class of all UI document views. This includes
both editing window and SVG preview, but neither non UI RGBA buffer
based NRArenas nor XML editor and similar views.
SPView base class has very little functionality of its own.

SPViewWidget is GUI widget that contain single SPView. It is also
abstract base class with little funtionality of its own.

2.6. SPDesktop

SPDesktop is subclass of SPView, implementing editable document canvas.
It is extensively used by many UI controls that need certain visual
representations of their own.

SPDesktop provides certain set of SPCanvasItems, serving as GUI layers
of different control objects. The one containing the whole document is
drawing layer. In addition to it, there are grid, guide, sketch and control
layers. Sketch layer is used for temporary drawing objects, before real
objects in document are created. Control layer contains editing knots,
rubberband and similar non-document UI objects.

Each SPDesktop is associated with SPNamedView node of document tree.
Currenlty all desktops are created from single main namedview, but in future
there may be support for different ones.
SPNamedView serves as in-document container for desktop-related data,
like grid and gudeline placement, snapping options and so on.

Associated with each SPDesktop are the two most important editing related
objects - SPSelection and SPEventContext.

Sodipodi keeps track of active desktop, and invokes notification
signals whenever it changes. UI elements can use these, to update their
display to the selection of currently active editing window.

2.7. SPSelection

This is per-desktop object, that keeps the list of selected objects
at given desktop. Both SPItem and SPRepr lists can be retrieved from
selection. Many actions operate on selection, so it is widely used
throughout sodipodi code.

SPSelection also implements its own asynchronous notification signals,
that UI elements can listen.

2.8. SPEventContext

SPEventContext is abstract base class of all tools. As the name indicates,
eventcontext implementations process UI events (mouse movements and
keypresses) and take actions (like creating or modifying objects).
There is one event context implementation for each tool, plus few abstract
base classes. Writing new tool involves subclassing SPEventContext.



3. Some thoughts

3.1. Why we need two-level model tree?

The need for typed object tree is obvious, if we want to utilize OO
programming - what we certainly want to do. Although implemented in pure C,
Sodipodi uses gtk (glib in future versions) type and object system,
which gives us extremely powerful set of OO functionality. As SVG is
designed with inheritance in mind, using object subclassing to represent
it is perfectly the right thing to do.

But there are also areas, where typed object structure would make things
more complex. For example, to implement copy buffer we had to save the
full state of copied objects. While this could be done with separate
virtual method of SPObject, we can use much easier way, and create the
duplicate corresponding SPRepr. As our document model already has to
implement generating full object representation of SPRepr tree of nodes,
generation of new objects during paste happens automatically, if given
SPRepr is inserted into XML tree. Agnostic xml tree is also used for undo
stack, as described earlier.

The main benefit comes from the extreme simplicity of the XML tree
manipulation API. All operations can be done, using only around 10
methods, which makes code much more robust, and is perfect for
implementing compatibility sensitive things, like plugin API.

XML tree also makes implementing two SVG features - cloning and
animations much easier, by providing invariant backbone.



22. Novemebr 2002
Lauris Kaplinski
<lauris@kaplinski.com>
