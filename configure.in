dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.50)
AC_INIT(sodipodi, 0.33pre)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE

AM_CONFIG_HEADER(config.h)

AC_PROG_INTLTOOL(0.22)

AC_CANONICAL_HOST
AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AM_PROG_AS
AC_HEADER_STDC

dnl AC_PROG_RANLIB

dnl Set PACKAGE_LOCALE_DIR in config.h.
dnl if test "x${prefix}" = "xNONE"; then
dnl 	AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale", [Localization directory])
dnl else
dnl 	AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale", [Localization directory])
dnl fi

AM_PROG_LIBTOOL

dnl ******************************
dnl Gettext stuff
dnl ******************************
GETTEXT_PACKAGE=sodipodi
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[Translation domain used])
dnl Add the languages which your application supports here.
ALL_LINGUAS="am az be ca cs da de el es et fr ga gl hu it ja nl no ru sk sl sr sr@Latn sv tr uk pl pt_BR pt zh_CN"
AM_GLIB_GNU_GETTEXT

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR(You have to install pkg-config to compile sodipodi.)
fi

AC_CHECK_LIB(png, png_read_info, [AC_CHECK_HEADER(png.h, png_ok=yes, png_ok=no)], png_ok=no, -lz -lm)
if test "x$png_ok" != "xyes"; then
	AC_MSG_ERROR([Libpng is needed to compile sodipodi])
fi

AC_PATH_PROG(FREETYPE_CONFIG, freetype-config, no)
if test "x$FREETYPE_CONFIG" = "xno"; then
	AC_MSG_ERROR([Cannot find freetype-config])
fi
FREETYPE_CFLAGS=`$FREETYPE_CONFIG --cflags`
FREETYPE_LIBS=`$FREETYPE_CONFIG --libs`
AC_SUBST(FREETYPE_CFLAGS)
AC_SUBST(FREETYPE_LIBS)

dnl ******************************
dnl Popt checking
dnl ******************************

AC_ARG_WITH(popt,
            AC_HELP_STRING([--with-popt], [use popt argument parsing library (default is auto)]),
            [with_popt=$withval], [with_popt=auto])

if test "x$with_popt" != "xno"; then
	dnl Have to test popt presence
	AC_CHECK_HEADER(popt.h, popt_ok=yes, popt_ok=no)
	if test "x$popt_ok" != "xyes"; then
		dnl No popt found
		if test "x$with_popt" = "xyes"; then
			dnl Popt was explicitly asked, so stop
			AC_MSG_ERROR([--with-popt was specified, but appropriate development packages could not be found])
		fi
	else
		dnl Found popt
		POPT_LIBS="-lpopt"
	fi
else
	dnl Asked to ignore popt
	popt_ok=no
fi

AM_CONDITIONAL(USE_POPT, test "x$popt_ok" = "xyes")
if test "x$popt_ok" = "xyes"; then
	AC_DEFINE(WITH_POPT, 1, [Use popt argument parsing library])
fi

dnl ******************************
dnl Xft checking
dnl ******************************

AC_ARG_WITH(xft,
            AC_HELP_STRING([--with-xft], [use xft scalable font database (default is auto)]),
            [with_xft=$withval], [with_xft=auto])

if test "x$with_xft" != "xno" ; then
	dnl Test fontconfig package
	PKG_CHECK_MODULES(XFT, xft, xft_ok=yes, xft_ok=no)
	if test "x$xft_ok" != "xyes"; then
		dnl test xft package
		PKG_CHECK_MODULES(XFT, fontconfig, xft_ok=yes, xft_ok=no)
		if test "x$xft_ok" != "xyes"; then
			dnl Have to test xft presence
			AC_CHECK_HEADER(X11/Xft/Xft.h, xft_ok=yes, xft_ok=no)
			if test "x$xft_ok" != "xyes"; then
				dnl No xft found
				if test "x$with_xft" = "xyes"; then
					dnl Xft was explicitly asked, so stop
					AC_MSG_ERROR([--with-xft was specified, but appropriate development packages could not be found])
				fi
			else
				dnl Working Xft1
				XFT_LIBS="-lXft"
			fi
		fi
	fi
else
	dnl Asked to ignore xft
	xft_ok=no
fi

AC_SUBST(XFT_CFLAGS)
AC_SUBST(XFT_LIBS)

AM_CONDITIONAL(USE_XFT, test "x$xft_ok" = "xyes")
if test "x$xft_ok" = "xyes"; then
	AC_DEFINE(WITH_XFT, 1, [Use Xft font database])
fi


dnl ******************************
dnl GnomePrint checking
dnl ******************************

AC_ARG_WITH(gnome-print,
            AC_HELP_STRING([--with-gnome-print], [use gnome print font database and spooler frontend]),
            [with_gp=$withval], [with_gp=auto])

if test "x$with_gp" = "xyes"; then
	dnl Have to test gnome-print presence
	PKG_CHECK_MODULES(GNOME_PRINT, libgnomeprint-2.2 >= 1.116.0  libgnomeprintui-2.2 >= 1.116.0, gp=yes, gp=no)
	if test "x$gp" != "xyes"; then
		dnl No gnome-print found
		if test "x$with_gp" = "xyes"; then
			dnl Gnome-print was explicitly asked, so stop
			AC_MSG_ERROR([--with-gnome-print was specified, but appropriate libgnomeprint development packages could not found])
		else 
			# gp is no, tell us for the log file 
			AC_MSG_RESULT($gp)
		fi
	fi
else
	dnl Asked to ignore gnome-print
	gp=no
fi

AC_SUBST(GNOME_PRINT_CFLAGS)
AC_SUBST(GNOME_PRINT_LIBS)

AM_CONDITIONAL(USE_GNOME_PRINT, test "x$gp" = "xyes")
if test "x$gp" = "xyes"; then
	AC_DEFINE(WITH_GNOME_PRINT, 1, [Use gnome print font database and spooler frontend])
fi


dnl ******************************
dnl   Unconditional dependencies
dnl ******************************

PKG_CHECK_MODULES(SODIPODI, gtk+-2.0 >= 2.0.0  libart-2.0 >= 2.3.10  libxml-2.0 >= 2-2.4.24)
SODIPODI_LIBS="$SODIPODI_LIBS $POPT_LIBS -lpng -lz"

dnl Check for bind_textdomain_codeset, including -lintl if GLib brings it in.
sp_save_LIBS=$LIBS
LIBS="$LIBS $SODIPODI_LIBS"
AC_CHECK_FUNCS(bind_textdomain_codeset)
AC_CHECK_FUNCS(gtk_window_set_default_icon_from_file)
LIBS=$sp_save_LIBS


dnl ******************************
dnl   Plugin Support
dnl ******************************
dnl
dnl UPDATE: This is unconditional now (Lauris)
dnl
dnl AC_ARG_WITH(modules, AC_HELP_STRING([--with-modules], [Compile with plugin support (experimental)]), [mod=$withval], [mod=yes])
dnl
dnl AM_CONDITIONAL(USE_MODULES, test "x$mod" = "xyes")
dnl if test "x$mod" = "xyes"; then
dnl 	AC_DEFINE(WITH_MODULES, 1, [Use experimental module support])
dnl fi

AC_DEFINE(WITH_MODULES, 1, [Use experimental module support])

dnl ******************************
dnl   libsodipodi
dnl ******************************
dnl
dnl AC_ARG_ENABLE(libsodipodi, AC_HELP_STRING([--enable-libsodipodi], [Compile dynamic library (experimental)]), [splib=$enableval], [splib=no])
dnl
dnl AM_CONDITIONAL(ENABLE_LIBSODIPODI, test "x$splib" != "xno")
dnl

dnl ******************************
dnl Frontline/Autotrace support
dnl ******************************
dnl ifdef([AM_PATH_FRONTLINE],
dnl 	[AM_PATH_FRONTLINE("0.5.1",[AC_DEFINE(ENABLE_AUTOTRACE)
dnl 		SODIPODI_CFLAGS="$FRONTLINE_CFLAGS $SODIPODI_CFLAGS"
dnl 		SODIPODI_LIBS="$FRONTLINE_LIBS $SODIPODI_LIBS"], 
dnl 	AC_MSG_WARN([Cannot find Frontline library.])
dnl 	AC_MSG_WARN([AutoTrace function are disabled.]))
dnl ])

AC_SUBST(SODIPODI_CFLAGS)
AC_SUBST(SODIPODI_LIBS)

#
# Checks to see if we should compile in MMX support (there will be
# a runtime test when the code is actually run to see if it should
# be used - this just checks if we can compile it.)
#
# This code is partially taken from Mesa
#
dnl Let people disable the MMX optimization
AC_ARG_ENABLE(mmx, [  --disable-mmx     Don't use MMX optimization [default=auto]], enable_mmx="$enableval", enable_mmx=auto)

AC_MSG_CHECKING(for x86 platform)
case $host_cpu in
  i386|i486|i586|i686|i786|k6|k7)
    use_x86_asm=yes
    ;;
  *)
    use_x86_asm=no
esac
AC_MSG_RESULT($use_x86_asm)

dnl Are we going to use MMX extensions
use_mmx_asm=no

AC_MSG_CHECKING(compiler support for MMX)

if test x$enable_mmx = xauto ; then
  if test $use_x86_asm = yes; then
    save_ac_ext=$ac_ext
    ac_ext=S
    
    cp $srcdir/src/libnr/nr_mmx_R8G8B8A8_P_R8G8B8A8_P_A8_RGBAP.S conftest.S
    if AC_TRY_EVAL(ac_compile); then
        use_mmx_asm=yes
    fi
    dnl rm -f conftest.[oS]

    ac_ext=$save_ac_ext
  fi

dnl Enforce usage of MMX extensions
elif test x$enable_mmx = xyes ; then
    use_mmx_asm=yes
else
    use_mmx_asm=no
fi

if test $use_mmx_asm = yes; then
	AC_DEFINE(WITH_MMX, 1, [Use MMX optimizations, if CPU supports it])
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi

AM_CONDITIONAL(USE_MMX, test x$use_mmx_asm = xyes)

AC_ARG_WITH(kde, AC_HELP_STRING([--with-kde], [Compile with kde support (experimental)]), [kde=$withval], [kde=no])

AM_CONDITIONAL(USE_KDE, test "x$kde" = "xyes")
if test "x$kde" = "xyes"; then
	AC_PROG_CXX
	AC_PATH_KDE
	KDE_CHECK_NEWLIBS
	AC_DEFINE(WITH_KDE, 1, [Use experimental kde support])
fi

dnl Have to add module makefiles (lauris)

AC_CONFIG_FILES([
Makefile
src/Makefile
src/libnr/Makefile
src/libnrtype/Makefile
src/xml/Makefile
src/svg/Makefile
src/widgets/Makefile
src/helper/Makefile
src/dialogs/Makefile
src/display/Makefile
src/modules/Makefile
extensions/Makefile
po/Makefile.in
glade/Makefile
sodipodi.spec
sodipodi.1
])
AC_OUTPUT

echo "
Configuration:

        Source code location:     ${srcdir}
        Compiler:                 ${CC} 
        CFLAGS:                   ${CFLAGS}

        Use POPT argument parser: ${popt_ok}
        Use Xft font database:    ${xft_ok}
        Use gnome-print:          ${gp}
        Use MMX optimizations:    ${use_mmx_asm}
	KDE support:		  ${kde}
"

